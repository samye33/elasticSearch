<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.am.es.dao.clue.ClueInfoMapper">
    <resultMap id="BaseResultMap" type="com.am.es.entity.clue.ClueInfo">
        <id column="id" property="id" jdbcType="INTEGER"/>
        <result column="clue_no" property="clueNo" jdbcType="VARCHAR"/>
        <result column="custom_id" property="customId" jdbcType="INTEGER"/>
        <result column="custom_no" property="customNo" jdbcType="VARCHAR"/>
        <result column="intention" property="intention" jdbcType="INTEGER"/>
        <result column="intention_grade" property="intentionGrade" jdbcType="INTEGER"/>
        <result column="first_channel_code" property="firstChannelCode" jdbcType="VARCHAR"/>
        <result column="effectively_channel_code" property="effectivelyChannelCode" jdbcType="VARCHAR"/>
        <result column="course_type" property="courseType" jdbcType="INTEGER"/>
        <result column="remark" property="remark" jdbcType="VARCHAR"/>
        <result column="create_time" property="createTime" jdbcType="TIMESTAMP"/>
        <result column="create_by" property="createBy" jdbcType="INTEGER"/>
        <result column="update_time" property="updateTime" jdbcType="TIMESTAMP"/>
        <result column="update_by" property="updateBy" jdbcType="INTEGER"/>
        <result column="channel_code_sub" property="channelCodeSub" jdbcType="INTEGER"/>
        <result column="source_channel_code" property="sourceChannelCode" jdbcType="VARCHAR"/>
    </resultMap>

    <sql id="Example_Where_Clause">
        <where>
            <foreach collection="oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" suffix=")" prefixOverrides="and">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach collection="criterion.value" item="listItem" open="(" close=")"
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Update_By_Example_Where_Clause">
        <where>
            <foreach collection="example.oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" suffix=")" prefixOverrides="and">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach collection="criterion.value" item="listItem" open="(" close=")"
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Base_Column_List">
    id, clue_no, custom_id, custom_no, intention, intention_grade, first_channel_code, 
    effectively_channel_code, course_type, remark, create_time, create_by, update_time, 
    update_by, channel_code_sub, source_channel_code
  </sql>
    <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.am.es.entity.clue.ClueInfoExample">
        select
        <if test="distinct">
            distinct
        </if>
        <include refid="Base_Column_List"/>
        from clue_info
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
    </select>
    <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer">
        select
        <include refid="Base_Column_List"/>
        from clue_info
        where id = #{id,jdbcType=INTEGER}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from clue_info
    where id = #{id,jdbcType=INTEGER}
  </delete>
    <delete id="deleteByExample" parameterType="com.am.es.entity.clue.ClueInfoExample">
        delete from clue_info
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </delete>
    <insert id="insert" parameterType="com.am.es.entity.clue.ClueInfo">
    insert into clue_info (id, clue_no, custom_id, 
      custom_no, intention, intention_grade, 
      first_channel_code, effectively_channel_code, 
      course_type, remark, create_time, 
      create_by, update_time, update_by, 
      channel_code_sub, source_channel_code)
    values (#{id,jdbcType=INTEGER}, #{clueNo,jdbcType=VARCHAR}, #{customId,jdbcType=INTEGER}, 
      #{customNo,jdbcType=VARCHAR}, #{intention,jdbcType=INTEGER}, #{intentionGrade,jdbcType=INTEGER}, 
      #{firstChannelCode,jdbcType=VARCHAR}, #{effectivelyChannelCode,jdbcType=VARCHAR}, 
      #{courseType,jdbcType=INTEGER}, #{remark,jdbcType=VARCHAR}, #{createTime,jdbcType=TIMESTAMP}, 
      #{createBy,jdbcType=INTEGER}, #{updateTime,jdbcType=TIMESTAMP}, #{updateBy,jdbcType=INTEGER}, 
      #{channelCodeSub,jdbcType=INTEGER}, #{sourceChannelCode,jdbcType=VARCHAR})
  </insert>
    <insert id="insertSelective" parameterType="com.am.es.entity.clue.ClueInfo">
        insert into clue_info
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="clueNo != null">
                clue_no,
            </if>
            <if test="customId != null">
                custom_id,
            </if>
            <if test="customNo != null">
                custom_no,
            </if>
            <if test="intention != null">
                intention,
            </if>
            <if test="intentionGrade != null">
                intention_grade,
            </if>
            <if test="firstChannelCode != null">
                first_channel_code,
            </if>
            <if test="effectivelyChannelCode != null">
                effectively_channel_code,
            </if>
            <if test="courseType != null">
                course_type,
            </if>
            <if test="remark != null">
                remark,
            </if>
            <if test="createTime != null">
                create_time,
            </if>
            <if test="createBy != null">
                create_by,
            </if>
            <if test="updateTime != null">
                update_time,
            </if>
            <if test="updateBy != null">
                update_by,
            </if>
            <if test="channelCodeSub != null">
                channel_code_sub,
            </if>
            <if test="sourceChannelCode != null">
                source_channel_code,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=INTEGER},
            </if>
            <if test="clueNo != null">
                #{clueNo,jdbcType=VARCHAR},
            </if>
            <if test="customId != null">
                #{customId,jdbcType=INTEGER},
            </if>
            <if test="customNo != null">
                #{customNo,jdbcType=VARCHAR},
            </if>
            <if test="intention != null">
                #{intention,jdbcType=INTEGER},
            </if>
            <if test="intentionGrade != null">
                #{intentionGrade,jdbcType=INTEGER},
            </if>
            <if test="firstChannelCode != null">
                #{firstChannelCode,jdbcType=VARCHAR},
            </if>
            <if test="effectivelyChannelCode != null">
                #{effectivelyChannelCode,jdbcType=VARCHAR},
            </if>
            <if test="courseType != null">
                #{courseType,jdbcType=INTEGER},
            </if>
            <if test="remark != null">
                #{remark,jdbcType=VARCHAR},
            </if>
            <if test="createTime != null">
                #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="createBy != null">
                #{createBy,jdbcType=INTEGER},
            </if>
            <if test="updateTime != null">
                #{updateTime,jdbcType=TIMESTAMP},
            </if>
            <if test="updateBy != null">
                #{updateBy,jdbcType=INTEGER},
            </if>
            <if test="channelCodeSub != null">
                #{channelCodeSub,jdbcType=INTEGER},
            </if>
            <if test="sourceChannelCode != null">
                #{sourceChannelCode,jdbcType=VARCHAR},
            </if>
        </trim>
    </insert>
    <select id="countByExample" parameterType="com.am.es.entity.clue.ClueInfoExample" resultType="java.lang.Integer">
        select count(*) from clue_info
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </select>
    <update id="updateByExampleSelective" parameterType="map">
        update clue_info
        <set>
            <if test="record.id != null">
                id = #{record.id,jdbcType=INTEGER},
            </if>
            <if test="record.clueNo != null">
                clue_no = #{record.clueNo,jdbcType=VARCHAR},
            </if>
            <if test="record.customId != null">
                custom_id = #{record.customId,jdbcType=INTEGER},
            </if>
            <if test="record.customNo != null">
                custom_no = #{record.customNo,jdbcType=VARCHAR},
            </if>
            <if test="record.intention != null">
                intention = #{record.intention,jdbcType=INTEGER},
            </if>
            <if test="record.intentionGrade != null">
                intention_grade = #{record.intentionGrade,jdbcType=INTEGER},
            </if>
            <if test="record.firstChannelCode != null">
                first_channel_code = #{record.firstChannelCode,jdbcType=VARCHAR},
            </if>
            <if test="record.effectivelyChannelCode != null">
                effectively_channel_code = #{record.effectivelyChannelCode,jdbcType=VARCHAR},
            </if>
            <if test="record.courseType != null">
                course_type = #{record.courseType,jdbcType=INTEGER},
            </if>
            <if test="record.remark != null">
                remark = #{record.remark,jdbcType=VARCHAR},
            </if>
            <if test="record.createTime != null">
                create_time = #{record.createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="record.createBy != null">
                create_by = #{record.createBy,jdbcType=INTEGER},
            </if>
            <if test="record.updateTime != null">
                update_time = #{record.updateTime,jdbcType=TIMESTAMP},
            </if>
            <if test="record.updateBy != null">
                update_by = #{record.updateBy,jdbcType=INTEGER},
            </if>
            <if test="record.channelCodeSub != null">
                channel_code_sub = #{record.channelCodeSub,jdbcType=INTEGER},
            </if>
            <if test="record.sourceChannelCode != null">
                source_channel_code = #{record.sourceChannelCode,jdbcType=VARCHAR},
            </if>
        </set>
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByExample" parameterType="map">
        update clue_info
        set id = #{record.id,jdbcType=INTEGER},
        clue_no = #{record.clueNo,jdbcType=VARCHAR},
        custom_id = #{record.customId,jdbcType=INTEGER},
        custom_no = #{record.customNo,jdbcType=VARCHAR},
        intention = #{record.intention,jdbcType=INTEGER},
        intention_grade = #{record.intentionGrade,jdbcType=INTEGER},
        first_channel_code = #{record.firstChannelCode,jdbcType=VARCHAR},
        effectively_channel_code = #{record.effectivelyChannelCode,jdbcType=VARCHAR},
        course_type = #{record.courseType,jdbcType=INTEGER},
        remark = #{record.remark,jdbcType=VARCHAR},
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
        create_by = #{record.createBy,jdbcType=INTEGER},
        update_time = #{record.updateTime,jdbcType=TIMESTAMP},
        update_by = #{record.updateBy,jdbcType=INTEGER},
        channel_code_sub = #{record.channelCodeSub,jdbcType=INTEGER},
        source_channel_code = #{record.sourceChannelCode,jdbcType=VARCHAR}
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByPrimaryKeySelective" parameterType="com.am.es.entity.clue.ClueInfo">
        update clue_info
        <set>
            <if test="clueNo != null">
                clue_no = #{clueNo,jdbcType=VARCHAR},
            </if>
            <if test="customId != null">
                custom_id = #{customId,jdbcType=INTEGER},
            </if>
            <if test="customNo != null">
                custom_no = #{customNo,jdbcType=VARCHAR},
            </if>
            <if test="intention != null">
                intention = #{intention,jdbcType=INTEGER},
            </if>
            <if test="intentionGrade != null">
                intention_grade = #{intentionGrade,jdbcType=INTEGER},
            </if>
            <if test="firstChannelCode != null">
                first_channel_code = #{firstChannelCode,jdbcType=VARCHAR},
            </if>
            <if test="effectivelyChannelCode != null">
                effectively_channel_code = #{effectivelyChannelCode,jdbcType=VARCHAR},
            </if>
            <if test="courseType != null">
                course_type = #{courseType,jdbcType=INTEGER},
            </if>
            <if test="remark != null">
                remark = #{remark,jdbcType=VARCHAR},
            </if>
            <if test="createTime != null">
                create_time = #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="createBy != null">
                create_by = #{createBy,jdbcType=INTEGER},
            </if>
            <if test="updateTime != null">
                update_time = #{updateTime,jdbcType=TIMESTAMP},
            </if>
            <if test="updateBy != null">
                update_by = #{updateBy,jdbcType=INTEGER},
            </if>
            <if test="channelCodeSub != null">
                channel_code_sub = #{channelCodeSub,jdbcType=INTEGER},
            </if>
            <if test="sourceChannelCode != null">
                source_channel_code = #{sourceChannelCode,jdbcType=VARCHAR},
            </if>
        </set>
        where id = #{id,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.am.es.entity.clue.ClueInfo">
    update clue_info
    set clue_no = #{clueNo,jdbcType=VARCHAR},
      custom_id = #{customId,jdbcType=INTEGER},
      custom_no = #{customNo,jdbcType=VARCHAR},
      intention = #{intention,jdbcType=INTEGER},
      intention_grade = #{intentionGrade,jdbcType=INTEGER},
      first_channel_code = #{firstChannelCode,jdbcType=VARCHAR},
      effectively_channel_code = #{effectivelyChannelCode,jdbcType=VARCHAR},
      course_type = #{courseType,jdbcType=INTEGER},
      remark = #{remark,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      create_by = #{createBy,jdbcType=INTEGER},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      update_by = #{updateBy,jdbcType=INTEGER},
      channel_code_sub = #{channelCodeSub,jdbcType=INTEGER},
      source_channel_code = #{sourceChannelCode,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>

    <select id="selectByCustomId" resultMap="BaseResultMap" parameterType="java.lang.Integer">
        select
        <include refid="Base_Column_List"/>
        from clue_info
        where custom_id = #{customId,jdbcType=INTEGER}
    </select>

    <select id="selectQueryClueInfo" resultType="com.am.es.model.ClueQueryResponseModel">
        SELECT
        clue_info.id,
        clue_info.remark remark,
        clue_info.suggest_contact_time suggestContactTime,
        clue_info.create_by clueCreateBy,
        clue_info.clue_type clueType,
        (SELECT sys_user.true_name FROM permission.sys_users sys_user WHERE clue_info.create_by = sys_user.user_id)AS
        clueCreateByName,
        effectively_base_batch.sale_level saleClueLevel,
        (SELECT dictionary.`name` FROM crmbase.base_dictionary dictionary WHERE effectively_base_batch.sale_level=
        dictionary.id) AS saleClueLevelName,
        clue_info.create_time clueCreateTime,
        clue_info.source_channel_code sourceChannelCode,
        (SELECT base_channel.`name` FROM crmbase.base_channel base_channel WHERE clue_info.source_channel_code=
        base_channel.id) AS sourceChannelName,
        clue_info.channel_code_sub channelCodeSub,
        (SELECT base_batch.`name` FROM crmbase.base_batch base_batch WHERE clue_info.channel_code_sub= base_batch.id) AS
        channelCodeSubName,
        clue_info.first_channel_code firstChannelCode,

        first_base_batch.`name` firstChannelName,

        clue_info.effectively_channel_code effectivelyChannelCode,
        effectively_base_batch.`name` effectivelyChannelName,
        clue_info.clue_consult_type clueConsultTypeId,
        (SELECT dictionary.`name` FROM crmbase.base_dictionary dictionary WHERE clue_info.clue_consult_type=
        dictionary.id) AS clueConsultTypeName,
        clue_info.course_type courseTypeId,
        (SELECT dictionary.`name` FROM crmbase.base_dictionary dictionary WHERE clue_info.course_type= dictionary.id) AS
        courseTypeName,

        clue_status.clue_ower_get_time clueOwerGetTime,
        clue_status.clue_owner_deparment clueOwnerDeparment,
        clue_status.associates associates,
        (SELECT sys_user.true_name FROM permission.sys_users sys_user WHERE clue_status.associates = sys_user.user_id)AS
        associatesName,
        clue_status.update_time updateTime,
        clue_status.recommender_contact recommenderContacat,
        clue_status.show_recommender_contact showRecommenderContacat,
        clue_status.repeat_consultation_time repeatConsultationTime,
        clue_status.clue_owner clueOwner,
        (SELECT sys_user.true_name FROM permission.sys_users sys_user WHERE clue_status.clue_owner = sys_user.user_id)AS
        clueOwnerName,
        clue_status.recommender recommenderName,
        clue_status.clue_school_manager_owner clueSchoolManagerOwnerId,
        (SELECT sys_user.true_name FROM permission.sys_users sys_user WHERE clue_status.clue_school_manager_owner =
        sys_user.user_id)AS clueSchoolManagerOwnerName,
        clue_status.clue_status clueStatus,
        (SELECT dictionary.`name` FROM crmbase.base_dictionary dictionary WHERE clue_status.clue_status= dictionary.id)
        AS clueStatusName,

        clue_describe.convenience_course_time convenienceCourseTime,
        clue_describe.sale_connet_count saleConnetCount,
        clue_describe.last_communicate_time lastCommunicateTime,
        clue_describe.sale_dial_count saleDialCount,
        clue_describe.sale_failure_follow_count saleFailureFollowCount,
        clue_describe.next_communicate_time nextCommunicateTime,
        clue_describe.last_call_time lastCallTime,
        (SELECT dictionary.`name` FROM crmbase.base_dictionary dictionary WHERE dictionary.id=clue_describe.Urgency)AS
        urgencyName,
        effectively_base_batch.`level` clueQuality,
        (SELECT dictionary.`name` FROM crmbase.base_dictionary dictionary WHERE effectively_base_batch.`level`= dictionary.id)
        AS clueQualityName,
        clue_describe.TrafficState trafficState,
        (SELECT dictionary.`name` FROM crmbase.base_dictionary dictionary WHERE clue_describe.TrafficState=
        dictionary.id) AS trafficStateName,
        clue_describe.FailureReason failureReason,
        (SELECT dictionary.`name` FROM crmbase.base_dictionary dictionary WHERE clue_describe.FailureReason=
        dictionary.id) AS failureReasonName,

        custom_info.true_name trueName,
        custom_info.parent_name contactName,
        custom_info.mail mail,
        custom_info.province provinceCode,
        province_area.`name` provinceName,
        custom_info.city cityCode,
        city_area.`name` cityName,
        CONCAT(province_area.`name`,'-',city_area.`name`) AS provinceCityName,
        custom_info.born_date bornDate,
        custom_info.enrollment_year enrollmentYear,
        custom_info.profession profession,
        custom_info.main_phone mainPhone,
        custom_info.show_main_phone showMainPhone,
        custom_info.qq,
        custom_info.wx_user_name wxUserName,
        custom_info.relationship relationshipName,
        custom_info.qualification qualification,
        (SELECT dictionary.`name` FROM crmbase.base_dictionary dictionary WHERE custom_info.qualification=
        dictionary.id) AS qualificationName,
        custom_info.gender gender,

        (SELECT turn_record.pre_user_id FROM crmclues.clue_turn_record turn_record WHERE
        turn_record.clue_id=clue_info.id ORDER BY turn_record.create_time DESC LIMIT 1)AS preUserId,
        (SELECT turn_record.pre_group_id FROM crmclues.clue_turn_record turn_record WHERE
        turn_record.clue_id=clue_info.id ORDER BY turn_record.create_time DESC LIMIT 1)AS preGroupId

        FROM
        crmclues.clue_info clue_info
        LEFT JOIN crmclues.clue_status clue_status ON clue_info.id = clue_status.clue_id
        LEFT JOIN crmclues.clue_describe clue_describe ON clue_info.id =clue_describe.clue_id
        LEFT JOIN crmclues.custom_info custom_info ON custom_info.id =clue_info.custom_id
        LEFT JOIN crmbase.base_province_area province_area ON province_area.identity_guid=custom_info.province
        LEFT JOIN crmbase.base_province_area city_area ON city_area.identity_guid=custom_info.city
        LEFT JOIN crmbase.base_batch first_base_batch ON first_base_batch.id=clue_info.first_channel_code
        LEFT JOIN crmbase.base_batch effectively_base_batch ON effectively_base_batch.id=clue_info.effectively_channel_code
        <where>
            clue_info.id IN
            <foreach collection="list" index="index" item="item" open="(" close=")" separator=",">
                #{item}
            </foreach>
        </where>
    </select>

    <select id="selectByBatchId" resultType="java.lang.Integer" parameterType="java.lang.Integer">
        SELECT id  FROM clue_info  WHERE first_channel_code = #{batchId,jdbcType=INTEGER}
    </select>
    <select id="selectAll" resultType="com.am.es.model.ClueQueryResponseModel">
        SELECT
        clue_info.id,
        clue_info.remark remark,
        clue_info.suggest_contact_time suggestContactTime,
        clue_info.create_by clueCreateBy,
        clue_info.clue_type clueType,
        (SELECT sys_user.true_name FROM permission.sys_users sys_user WHERE clue_info.create_by = sys_user.user_id)AS
        clueCreateByName,
        effectively_base_batch.sale_level saleClueLevel,
        (SELECT dictionary.`name` FROM crmbase.base_dictionary dictionary WHERE effectively_base_batch.sale_level=
        dictionary.id) AS saleClueLevelName,
        clue_info.create_time clueCreateTime,
        clue_info.source_channel_code sourceChannelCode,
        (SELECT base_channel.`name` FROM crmbase.base_channel base_channel WHERE clue_info.source_channel_code=
        base_channel.id) AS sourceChannelName,
        clue_info.channel_code_sub channelCodeSub,
        (SELECT base_batch.`name` FROM crmbase.base_batch base_batch WHERE clue_info.channel_code_sub= base_batch.id) AS
        channelCodeSubName,
        clue_info.first_channel_code firstChannelCode,

        first_base_batch.`name` firstChannelName,

        clue_info.effectively_channel_code effectivelyChannelCode,
        effectively_base_batch.`name` effectivelyChannelName,
        clue_info.clue_consult_type clueConsultTypeId,
        (SELECT dictionary.`name` FROM crmbase.base_dictionary dictionary WHERE clue_info.clue_consult_type=
        dictionary.id) AS clueConsultTypeName,
        clue_info.course_type courseTypeId,
        (SELECT dictionary.`name` FROM crmbase.base_dictionary dictionary WHERE clue_info.course_type= dictionary.id) AS
        courseTypeName,

        clue_status.clue_ower_get_time clueOwerGetTime,
        clue_status.clue_owner_deparment clueOwnerDeparment,
        clue_status.associates associates,
        (SELECT sys_user.true_name FROM permission.sys_users sys_user WHERE clue_status.associates = sys_user.user_id)AS
        associatesName,
        clue_status.update_time updateTime,
        clue_status.recommender_contact recommenderContacat,
        clue_status.show_recommender_contact showRecommenderContacat,
        clue_status.repeat_consultation_time repeatConsultationTime,
        clue_status.clue_owner clueOwner,
        (SELECT sys_user.true_name FROM permission.sys_users sys_user WHERE clue_status.clue_owner = sys_user.user_id)AS
        clueOwnerName,
        clue_status.recommender recommenderName,
        clue_status.clue_school_manager_owner clueSchoolManagerOwnerId,
        (SELECT sys_user.true_name FROM permission.sys_users sys_user WHERE clue_status.clue_school_manager_owner =
        sys_user.user_id)AS clueSchoolManagerOwnerName,
        clue_status.clue_status clueStatus,
        (SELECT dictionary.`name` FROM crmbase.base_dictionary dictionary WHERE clue_status.clue_status= dictionary.id)
        AS clueStatusName,

        clue_describe.convenience_course_time convenienceCourseTime,
        clue_describe.sale_connet_count saleConnetCount,
        clue_describe.last_communicate_time lastCommunicateTime,
        clue_describe.sale_dial_count saleDialCount,
        clue_describe.sale_failure_follow_count saleFailureFollowCount,
        clue_describe.next_communicate_time nextCommunicateTime,
        clue_describe.last_call_time lastCallTime,
        (SELECT dictionary.`name` FROM crmbase.base_dictionary dictionary WHERE dictionary.id=clue_describe.Urgency)AS
        urgencyName,
        effectively_base_batch.`level` clueQuality,
        (SELECT dictionary.`name` FROM crmbase.base_dictionary dictionary WHERE effectively_base_batch.`level`= dictionary.id)
        AS clueQualityName,
        clue_describe.TrafficState trafficState,
        (SELECT dictionary.`name` FROM crmbase.base_dictionary dictionary WHERE clue_describe.TrafficState=
        dictionary.id) AS trafficStateName,
        clue_describe.FailureReason failureReason,
        (SELECT dictionary.`name` FROM crmbase.base_dictionary dictionary WHERE clue_describe.FailureReason=
        dictionary.id) AS failureReasonName,

        custom_info.true_name trueName,
        custom_info.parent_name contactName,
        custom_info.province provinceCode,
        custom_info.mail mail,
        province_area.`name` provinceName,
        custom_info.city cityCode,
        city_area.`name` cityName,
        CONCAT(province_area.`name`,'-',city_area.`name`) AS provinceCityName,
        custom_info.born_date bornDate,
        custom_info.enrollment_year enrollmentYear,
        custom_info.profession profession,
        custom_info.main_phone mainPhone,
        custom_info.show_main_phone showMainPhone,
        custom_info.qq,
        custom_info.wx_user_name wxUserName,
        custom_info.relationship relationshipName,
        custom_info.qualification qualification,
        (SELECT dictionary.`name` FROM crmbase.base_dictionary dictionary WHERE custom_info.qualification=
        dictionary.id) AS qualificationName,
        custom_info.gender gender,

        (SELECT turn_record.pre_user_id FROM crmclues.clue_turn_record turn_record WHERE
        turn_record.clue_id=clue_info.id ORDER BY turn_record.create_time DESC LIMIT 1)AS preUserId,
        (SELECT turn_record.pre_group_id FROM crmclues.clue_turn_record turn_record WHERE
        turn_record.clue_id=clue_info.id ORDER BY turn_record.create_time DESC LIMIT 1)AS preGroupId

        FROM
        crmclues.clue_info clue_info
        LEFT JOIN crmclues.clue_status clue_status ON clue_info.id = clue_status.clue_id
        LEFT JOIN crmclues.clue_describe clue_describe ON clue_info.id =clue_describe.clue_id
        LEFT JOIN crmclues.custom_info custom_info ON custom_info.id =clue_info.custom_id
        LEFT JOIN crmbase.base_province_area province_area ON province_area.identity_guid=custom_info.province
        LEFT JOIN crmbase.base_province_area city_area ON city_area.identity_guid=custom_info.city
        LEFT JOIN crmbase.base_batch first_base_batch ON first_base_batch.id=clue_info.first_channel_code
        LEFT JOIN crmbase.base_batch effectively_base_batch ON effectively_base_batch.id=clue_info.effectively_channel_code
    </select>
    <select id="selectByCustomIdList" resultType="java.lang.Integer">
        select
        DISTINCT
          id
        from clue_info
        where custom_id IN
        <foreach collection="list" item="item" open="(" close=")" separator=",">
            #{item}
        </foreach>

    </select>
</mapper>